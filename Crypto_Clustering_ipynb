{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/abdyraman/CryptoClustering/blob/main/Crypto_Clustering_ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install holoviews hvplot"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 857
        },
        "id": "J2BXnxxxWpPP",
        "outputId": "db173473-5ba5-46e5-deed-5bf6dfa83fe2"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: holoviews in /usr/local/lib/python3.10/dist-packages (1.15.4)\n",
            "Requirement already satisfied: hvplot in /usr/local/lib/python3.10/dist-packages (0.8.4)\n",
            "Requirement already satisfied: param<2.0,>=1.9.3 in /usr/local/lib/python3.10/dist-packages (from holoviews) (1.13.0)\n",
            "Requirement already satisfied: numpy>=1.0 in /usr/local/lib/python3.10/dist-packages (from holoviews) (1.22.4)\n",
            "Requirement already satisfied: pyviz-comms>=0.7.4 in /usr/local/lib/python3.10/dist-packages (from holoviews) (2.3.2)\n",
            "Requirement already satisfied: panel>=0.13.1 in /usr/local/lib/python3.10/dist-packages (from holoviews) (0.14.4)\n",
            "Requirement already satisfied: colorcet in /usr/local/lib/python3.10/dist-packages (from holoviews) (3.0.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from holoviews) (23.1)\n",
            "Requirement already satisfied: pandas>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from holoviews) (1.5.3)\n",
            "Requirement already satisfied: bokeh>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from hvplot) (3.2.0)\n",
            "Requirement already satisfied: Jinja2>=2.9 in /usr/local/lib/python3.10/dist-packages (from bokeh>=1.0.0->hvplot) (3.1.2)\n",
            "Requirement already satisfied: contourpy>=1 in /usr/local/lib/python3.10/dist-packages (from bokeh>=1.0.0->hvplot) (1.1.0)\n",
            "Requirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.10/dist-packages (from bokeh>=1.0.0->hvplot) (8.4.0)\n",
            "Requirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.10/dist-packages (from bokeh>=1.0.0->hvplot) (6.0)\n",
            "Requirement already satisfied: tornado>=5.1 in /usr/local/lib/python3.10/dist-packages (from bokeh>=1.0.0->hvplot) (6.3.1)\n",
            "Requirement already satisfied: xyzservices>=2021.09.1 in /usr/local/lib/python3.10/dist-packages (from bokeh>=1.0.0->hvplot) (2023.5.0)\n",
            "Requirement already satisfied: pyct>=0.4.4 in /usr/local/lib/python3.10/dist-packages (from colorcet->holoviews) (0.5.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.20.0->holoviews) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.20.0->holoviews) (2022.7.1)\n",
            "Collecting bokeh>=1.0.0 (from hvplot)\n",
            "  Downloading bokeh-2.4.3-py3-none-any.whl (18.5 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.5/18.5 MB\u001b[0m \u001b[31m69.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: markdown in /usr/local/lib/python3.10/dist-packages (from panel>=0.13.1->holoviews) (3.4.3)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from panel>=0.13.1->holoviews) (2.27.1)\n",
            "Requirement already satisfied: tqdm>=4.48.0 in /usr/local/lib/python3.10/dist-packages (from panel>=0.13.1->holoviews) (4.65.0)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from panel>=0.13.1->holoviews) (6.0.0)\n",
            "Requirement already satisfied: setuptools>=42 in /usr/local/lib/python3.10/dist-packages (from panel>=0.13.1->holoviews) (67.7.2)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from panel>=0.13.1->holoviews) (4.6.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=2.9->bokeh>=1.0.0->hvplot) (2.1.3)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>=0.20.0->holoviews) (1.16.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->panel>=0.13.1->holoviews) (0.5.1)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->panel>=0.13.1->holoviews) (1.26.16)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->panel>=0.13.1->holoviews) (2023.5.7)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests->panel>=0.13.1->holoviews) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->panel>=0.13.1->holoviews) (3.4)\n",
            "Installing collected packages: bokeh\n",
            "  Attempting uninstall: bokeh\n",
            "    Found existing installation: bokeh 3.2.0\n",
            "    Uninstalling bokeh-3.2.0:\n",
            "      Successfully uninstalled bokeh-3.2.0\n",
            "Successfully installed bokeh-2.4.3\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "bokeh"
                ]
              }
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OlYMFC25Npq8",
        "outputId": "b848c874-db56-49d7-85cc-4a4eb1f760f9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Launching server at http://localhost:36759\n"
          ]
        }
      ],
      "source": [
        "# Import required libraries and dependencies\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "import matplotlib.pyplot as plt\n",
        "import hvplot.pandas\n",
        "\n",
        "import pandas as pd, numpy as np\n",
        "\n",
        "idx = pd.date_range('1/1/2000', periods=1000)\n",
        "df  = pd.DataFrame(np.random.randn(1000, 4), index=idx, columns=list('ABCD')).cumsum()\n",
        "\n",
        "hvplot.show(df.hvplot())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "6i9U9Q41Npq9",
        "outputId": "f7e96f4f-36c1-4bd0-e457-dad31f2c6218"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 price_change_percentage_24h  price_change_percentage_7d  \\\n",
              "coin_id                                                                    \n",
              "ethereum                             0.22392                    10.38134   \n",
              "iota                                 0.41996                     6.06830   \n",
              "wrapped-bitcoin                      1.10231                     7.40537   \n",
              "digibyte                             2.97084                     0.67038   \n",
              "okb                                 -2.72700                    -4.55389   \n",
              "binance-usd                         -0.10642                     0.04726   \n",
              "cardano                              0.00322                    13.99302   \n",
              "cdai                                 0.21169                     0.05820   \n",
              "chainlink                           -0.23935                    20.69459   \n",
              "havven                              -4.07216                     4.33651   \n",
              "\n",
              "                 price_change_percentage_14d  price_change_percentage_30d  \\\n",
              "coin_id                                                                     \n",
              "ethereum                             4.80849                      0.13169   \n",
              "iota                                -3.77714                     -4.15281   \n",
              "wrapped-bitcoin                      6.55668                      7.37557   \n",
              "digibyte                            -7.31941                     13.25354   \n",
              "okb                                 -5.02662                    -10.43847   \n",
              "binance-usd                          0.05902                      0.01843   \n",
              "cardano                              5.55476                     10.10553   \n",
              "cdai                                 0.17076                     -2.18147   \n",
              "chainlink                            9.30098                    -11.21747   \n",
              "havven                             -13.29164                    -20.84154   \n",
              "\n",
              "                 price_change_percentage_60d  price_change_percentage_200d  \\\n",
              "coin_id                                                                      \n",
              "ethereum                           -12.88890                     186.77418   \n",
              "iota                               -34.51894                      95.02821   \n",
              "wrapped-bitcoin                     -3.58772                      83.90520   \n",
              "digibyte                           -31.09030                     482.58918   \n",
              "okb                                 -2.83120                      39.95853   \n",
              "binance-usd                          0.09383                       0.09959   \n",
              "cardano                            -22.84776                     264.51418   \n",
              "cdai                                 0.65726                      -0.39210   \n",
              "chainlink                          -43.69522                     403.22917   \n",
              "havven                             -39.42657                     622.92465   \n",
              "\n",
              "                 price_change_percentage_1y  \n",
              "coin_id                                      \n",
              "ethereum                          101.96023  \n",
              "iota                               -3.98533  \n",
              "wrapped-bitcoin                    37.53424  \n",
              "digibyte                          184.38014  \n",
              "okb                               141.95791  \n",
              "binance-usd                         0.13928  \n",
              "cardano                           156.09756  \n",
              "cdai                               -0.28783  \n",
              "chainlink                         325.13186  \n",
              "havven                            678.78427  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8ab7595-d56b-46c9-a3dc-380a02a7f78f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price_change_percentage_24h</th>\n",
              "      <th>price_change_percentage_7d</th>\n",
              "      <th>price_change_percentage_14d</th>\n",
              "      <th>price_change_percentage_30d</th>\n",
              "      <th>price_change_percentage_60d</th>\n",
              "      <th>price_change_percentage_200d</th>\n",
              "      <th>price_change_percentage_1y</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>coin_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ethereum</th>\n",
              "      <td>0.22392</td>\n",
              "      <td>10.38134</td>\n",
              "      <td>4.80849</td>\n",
              "      <td>0.13169</td>\n",
              "      <td>-12.88890</td>\n",
              "      <td>186.77418</td>\n",
              "      <td>101.96023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>iota</th>\n",
              "      <td>0.41996</td>\n",
              "      <td>6.06830</td>\n",
              "      <td>-3.77714</td>\n",
              "      <td>-4.15281</td>\n",
              "      <td>-34.51894</td>\n",
              "      <td>95.02821</td>\n",
              "      <td>-3.98533</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>wrapped-bitcoin</th>\n",
              "      <td>1.10231</td>\n",
              "      <td>7.40537</td>\n",
              "      <td>6.55668</td>\n",
              "      <td>7.37557</td>\n",
              "      <td>-3.58772</td>\n",
              "      <td>83.90520</td>\n",
              "      <td>37.53424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>digibyte</th>\n",
              "      <td>2.97084</td>\n",
              "      <td>0.67038</td>\n",
              "      <td>-7.31941</td>\n",
              "      <td>13.25354</td>\n",
              "      <td>-31.09030</td>\n",
              "      <td>482.58918</td>\n",
              "      <td>184.38014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>okb</th>\n",
              "      <td>-2.72700</td>\n",
              "      <td>-4.55389</td>\n",
              "      <td>-5.02662</td>\n",
              "      <td>-10.43847</td>\n",
              "      <td>-2.83120</td>\n",
              "      <td>39.95853</td>\n",
              "      <td>141.95791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>binance-usd</th>\n",
              "      <td>-0.10642</td>\n",
              "      <td>0.04726</td>\n",
              "      <td>0.05902</td>\n",
              "      <td>0.01843</td>\n",
              "      <td>0.09383</td>\n",
              "      <td>0.09959</td>\n",
              "      <td>0.13928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cardano</th>\n",
              "      <td>0.00322</td>\n",
              "      <td>13.99302</td>\n",
              "      <td>5.55476</td>\n",
              "      <td>10.10553</td>\n",
              "      <td>-22.84776</td>\n",
              "      <td>264.51418</td>\n",
              "      <td>156.09756</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cdai</th>\n",
              "      <td>0.21169</td>\n",
              "      <td>0.05820</td>\n",
              "      <td>0.17076</td>\n",
              "      <td>-2.18147</td>\n",
              "      <td>0.65726</td>\n",
              "      <td>-0.39210</td>\n",
              "      <td>-0.28783</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chainlink</th>\n",
              "      <td>-0.23935</td>\n",
              "      <td>20.69459</td>\n",
              "      <td>9.30098</td>\n",
              "      <td>-11.21747</td>\n",
              "      <td>-43.69522</td>\n",
              "      <td>403.22917</td>\n",
              "      <td>325.13186</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>havven</th>\n",
              "      <td>-4.07216</td>\n",
              "      <td>4.33651</td>\n",
              "      <td>-13.29164</td>\n",
              "      <td>-20.84154</td>\n",
              "      <td>-39.42657</td>\n",
              "      <td>622.92465</td>\n",
              "      <td>678.78427</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8ab7595-d56b-46c9-a3dc-380a02a7f78f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f8ab7595-d56b-46c9-a3dc-380a02a7f78f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f8ab7595-d56b-46c9-a3dc-380a02a7f78f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "# Load the data into a Pandas DataFrame\n",
        "df_market_data = pd.read_csv('/content/crypto_market_data.csv', index_col=\"coin_id\")\n",
        "\n",
        "# Display sample data\n",
        "df_market_data.sample(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "_cItUCL_Npq-",
        "outputId": "5e8c06f1-b269-44d6-9839-7687a9eb0894"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       price_change_percentage_24h  price_change_percentage_7d  \\\n",
              "count                    41.000000                   41.000000   \n",
              "mean                     -0.269686                    4.497147   \n",
              "std                       2.694793                    6.375218   \n",
              "min                     -13.527860                   -6.094560   \n",
              "25%                      -0.608970                    0.047260   \n",
              "50%                      -0.063410                    3.296410   \n",
              "75%                       0.612090                    7.602780   \n",
              "max                       4.840330                   20.694590   \n",
              "\n",
              "       price_change_percentage_14d  price_change_percentage_30d  \\\n",
              "count                    41.000000                    41.000000   \n",
              "mean                      0.185787                     1.545693   \n",
              "std                       8.376939                    26.344218   \n",
              "min                     -18.158900                   -34.705480   \n",
              "25%                      -5.026620                   -10.438470   \n",
              "50%                       0.109740                    -0.042370   \n",
              "75%                       5.510740                     4.578130   \n",
              "max                      24.239190                   140.795700   \n",
              "\n",
              "       price_change_percentage_60d  price_change_percentage_200d  \\\n",
              "count                    41.000000                     41.000000   \n",
              "mean                     -0.094119                    236.537432   \n",
              "std                      47.365803                    435.225304   \n",
              "min                     -44.822480                     -0.392100   \n",
              "25%                     -25.907990                     21.660420   \n",
              "50%                      -7.544550                     83.905200   \n",
              "75%                       0.657260                    216.177610   \n",
              "max                     223.064370                   2227.927820   \n",
              "\n",
              "       price_change_percentage_1y  \n",
              "count                   41.000000  \n",
              "mean                   347.667956  \n",
              "std                   1247.842884  \n",
              "min                    -17.567530  \n",
              "25%                      0.406170  \n",
              "50%                     69.691950  \n",
              "75%                    168.372510  \n",
              "max                   7852.089700  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-200f3913-50e5-4f9e-931d-452fb5d4f542\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price_change_percentage_24h</th>\n",
              "      <th>price_change_percentage_7d</th>\n",
              "      <th>price_change_percentage_14d</th>\n",
              "      <th>price_change_percentage_30d</th>\n",
              "      <th>price_change_percentage_60d</th>\n",
              "      <th>price_change_percentage_200d</th>\n",
              "      <th>price_change_percentage_1y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>41.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>41.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-0.269686</td>\n",
              "      <td>4.497147</td>\n",
              "      <td>0.185787</td>\n",
              "      <td>1.545693</td>\n",
              "      <td>-0.094119</td>\n",
              "      <td>236.537432</td>\n",
              "      <td>347.667956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.694793</td>\n",
              "      <td>6.375218</td>\n",
              "      <td>8.376939</td>\n",
              "      <td>26.344218</td>\n",
              "      <td>47.365803</td>\n",
              "      <td>435.225304</td>\n",
              "      <td>1247.842884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-13.527860</td>\n",
              "      <td>-6.094560</td>\n",
              "      <td>-18.158900</td>\n",
              "      <td>-34.705480</td>\n",
              "      <td>-44.822480</td>\n",
              "      <td>-0.392100</td>\n",
              "      <td>-17.567530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-0.608970</td>\n",
              "      <td>0.047260</td>\n",
              "      <td>-5.026620</td>\n",
              "      <td>-10.438470</td>\n",
              "      <td>-25.907990</td>\n",
              "      <td>21.660420</td>\n",
              "      <td>0.406170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-0.063410</td>\n",
              "      <td>3.296410</td>\n",
              "      <td>0.109740</td>\n",
              "      <td>-0.042370</td>\n",
              "      <td>-7.544550</td>\n",
              "      <td>83.905200</td>\n",
              "      <td>69.691950</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.612090</td>\n",
              "      <td>7.602780</td>\n",
              "      <td>5.510740</td>\n",
              "      <td>4.578130</td>\n",
              "      <td>0.657260</td>\n",
              "      <td>216.177610</td>\n",
              "      <td>168.372510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>4.840330</td>\n",
              "      <td>20.694590</td>\n",
              "      <td>24.239190</td>\n",
              "      <td>140.795700</td>\n",
              "      <td>223.064370</td>\n",
              "      <td>2227.927820</td>\n",
              "      <td>7852.089700</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-200f3913-50e5-4f9e-931d-452fb5d4f542')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-200f3913-50e5-4f9e-931d-452fb5d4f542 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-200f3913-50e5-4f9e-931d-452fb5d4f542');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "# Generate summary statistics\n",
        "df_market_data.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 496
        },
        "id": "unOyiR6cNpq-",
        "outputId": "fc349565-2bf6-4fc2-bd2e-69d3d94a89a1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plot your data to see what's in your DataFrame\n",
        "fig, ax = plt.subplots(figsize=(8, 4))\n",
        "df_market_data.plot.line(ax=ax, rot=90)\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uKPxoPyQNpq-"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vP7FT7BqNpq-"
      },
      "source": [
        "### Prepare the Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "tj8W4KBXNpq_"
      },
      "outputs": [],
      "source": [
        "# Use the `StandardScaler()` module from scikit-learn to normalize the data from the CSV file\n",
        "stock_data_scaled = StandardScaler().fit_transform(df_market_data[['price_change_percentage_24h','price_change_percentage_7d','price_change_percentage_14d','price_change_percentage_30d','price_change_percentage_60d','price_change_percentage_200d','price_change_percentage_1y']])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 319
        },
        "id": "JEnrrhHfNpq_",
        "outputId": "f9a91db4-36d8-4997-8c6a-89000b6c59d4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              price_change_percentage_24h  price_change_percentage_7d  \\\n",
              "coin_id                                                                 \n",
              "bitcoin                          0.508529                    0.493193   \n",
              "ethereum                         0.185446                    0.934445   \n",
              "tether                           0.021774                   -0.706337   \n",
              "ripple                          -0.040764                   -0.810928   \n",
              "bitcoin-cash                     1.193036                    2.000959   \n",
              "\n",
              "              price_change_percentage_14d  price_change_percentage_30d  \\\n",
              "coin_id                                                                  \n",
              "bitcoin                          0.772200                     0.235460   \n",
              "ethereum                         0.558692                    -0.054341   \n",
              "tether                          -0.021680                    -0.061030   \n",
              "ripple                           0.249458                    -0.050388   \n",
              "bitcoin-cash                     1.760610                     0.545842   \n",
              "\n",
              "              price_change_percentage_60d  price_change_percentage_200d  \\\n",
              "coin_id                                                                   \n",
              "bitcoin                         -0.067495                     -0.355953   \n",
              "ethereum                        -0.273483                     -0.115759   \n",
              "tether                           0.008005                     -0.550247   \n",
              "ripple                          -0.373164                     -0.458259   \n",
              "bitcoin-cash                    -0.291203                     -0.499848   \n",
              "\n",
              "              price_change_percentage_1y  \n",
              "coin_id                                   \n",
              "bitcoin                        -0.251637  \n",
              "ethereum                       -0.199352  \n",
              "tether                         -0.282061  \n",
              "ripple                         -0.295546  \n",
              "bitcoin-cash                   -0.270317  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-774d3cd2-e994-4cc7-84a3-9fd45099e329\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price_change_percentage_24h</th>\n",
              "      <th>price_change_percentage_7d</th>\n",
              "      <th>price_change_percentage_14d</th>\n",
              "      <th>price_change_percentage_30d</th>\n",
              "      <th>price_change_percentage_60d</th>\n",
              "      <th>price_change_percentage_200d</th>\n",
              "      <th>price_change_percentage_1y</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>coin_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>bitcoin</th>\n",
              "      <td>0.508529</td>\n",
              "      <td>0.493193</td>\n",
              "      <td>0.772200</td>\n",
              "      <td>0.235460</td>\n",
              "      <td>-0.067495</td>\n",
              "      <td>-0.355953</td>\n",
              "      <td>-0.251637</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ethereum</th>\n",
              "      <td>0.185446</td>\n",
              "      <td>0.934445</td>\n",
              "      <td>0.558692</td>\n",
              "      <td>-0.054341</td>\n",
              "      <td>-0.273483</td>\n",
              "      <td>-0.115759</td>\n",
              "      <td>-0.199352</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tether</th>\n",
              "      <td>0.021774</td>\n",
              "      <td>-0.706337</td>\n",
              "      <td>-0.021680</td>\n",
              "      <td>-0.061030</td>\n",
              "      <td>0.008005</td>\n",
              "      <td>-0.550247</td>\n",
              "      <td>-0.282061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ripple</th>\n",
              "      <td>-0.040764</td>\n",
              "      <td>-0.810928</td>\n",
              "      <td>0.249458</td>\n",
              "      <td>-0.050388</td>\n",
              "      <td>-0.373164</td>\n",
              "      <td>-0.458259</td>\n",
              "      <td>-0.295546</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bitcoin-cash</th>\n",
              "      <td>1.193036</td>\n",
              "      <td>2.000959</td>\n",
              "      <td>1.760610</td>\n",
              "      <td>0.545842</td>\n",
              "      <td>-0.291203</td>\n",
              "      <td>-0.499848</td>\n",
              "      <td>-0.270317</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-774d3cd2-e994-4cc7-84a3-9fd45099e329')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-774d3cd2-e994-4cc7-84a3-9fd45099e329 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-774d3cd2-e994-4cc7-84a3-9fd45099e329');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "# Create a DataFrame with the scaled data\n",
        "df_stocks_scaled = pd.DataFrame(\n",
        "    stock_data_scaled,\n",
        "    columns=['price_change_percentage_24h','price_change_percentage_7d','price_change_percentage_14d','price_change_percentage_30d','price_change_percentage_60d','price_change_percentage_200d','price_change_percentage_1y'])\n",
        "# Copy the crypto names from the original data\n",
        "\n",
        "# Set the coinid column as index\n",
        "df_stocks_scaled[\"coin_id\"] = df_market_data.index\n",
        "\n",
        "# Display sample data\n",
        "df_stocks_scaled = df_stocks_scaled.set_index(\"coin_id\")\n",
        "df_stocks_scaled.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MadkrUxNNpq_"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TgTl3tO3Npq_"
      },
      "source": [
        "### Find the Best Value for k Using the Original Data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "1IQ9cWpiNpq_"
      },
      "outputs": [],
      "source": [
        "# Create a list with the number of k-values from 1 to 11\n",
        "k = list(range(1, 11))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DZL3I5kBNpq_",
        "outputId": "51dba780-b3cd-481b-fa26-bffb9893aecb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "# Create an empty list to store the inertia values\n",
        "inertia = []\n",
        "\n",
        "# Create a for loop to compute the inertia with each possible value of k\n",
        "# Inside the loop:\n",
        "# 1. Create a KMeans model using the loop counter for the n_clusters\n",
        "# 2. Fit the model to the data using `df_market_data_scaled`\n",
        "# 3. Append the model.inertia_ to the inertia list\n",
        "\n",
        "for i in k:\n",
        "    k_model = KMeans(n_clusters=i, random_state=0)\n",
        "    k_model.fit(df_stocks_scaled)\n",
        "    inertia.append(k_model.inertia_)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "f-2_IbyFNpq_",
        "outputId": "4905ab9e-eaa7-4ea5-f59e-3638cb8df134"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   k     inertia\n",
              "0  1  287.000000\n",
              "1  2  195.820218\n",
              "2  3  123.190482\n",
              "3  4   79.022435\n",
              "4  5   65.302379"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8ac4659f-dd4a-437d-adab-3280017e2fff\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>k</th>\n",
              "      <th>inertia</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>287.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>195.820218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>123.190482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>79.022435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>65.302379</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ac4659f-dd4a-437d-adab-3280017e2fff')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8ac4659f-dd4a-437d-adab-3280017e2fff button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8ac4659f-dd4a-437d-adab-3280017e2fff');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "# Create a dictionary with the data to plot the Elbow curve\n",
        "elbow_data = {\"k\": k, \"inertia\": inertia}\n",
        "df_elbow = pd.DataFrame(elbow_data)\n",
        "\n",
        "# Create a DataFrame with the data to plot the Elbow curve\n",
        "df_elbow.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "HSibw102Npq_",
        "outputId": "c24968c8-1c33-421f-d4f8-cd1a1f459f01"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Elbow Curve'}, xlabel='k'>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plot a line chart with all the inertia values computed with\n",
        "# the different values of k to visually identify the optimal value for k.\n",
        "df_elbow.plot.line(\n",
        "    x=\"k\",\n",
        "    y=\"inertia\",\n",
        "    title=\"Elbow Curve\",\n",
        "    xticks=k\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rn9kR5eENprA"
      },
      "source": [
        "#### Answer the following question:\n",
        "\n",
        "**Question:** What is the best value for `k`?\n",
        "\n",
        "**Answer:** The best value for k is four, because it shows the lowest inertia and k numbers."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FZptqXcTNprA"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YmEU3RmjNprA"
      },
      "source": [
        "### Cluster Cryptocurrencies with K-means Using the Original Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "oxw1Sj7dNprA"
      },
      "outputs": [],
      "source": [
        "# Initialize the K-Means model using the best value for k\n",
        "model = KMeans(n_clusters=4, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "id": "AgIw5UhVNprA",
        "outputId": "6ccd3af7-7379-483b-e264-fbadcb5e8778"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(n_clusters=4, random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=4, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=4, random_state=0)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "# Fit the K-Means model using the scaled data\n",
        "model.fit(df_stocks_scaled)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QKANJ7kQNprA",
        "outputId": "bdc94243-28a0-4237-c433-00350ad191c6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 3, 3, 0, 3, 3, 0,\n",
              "       3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 1, 0, 3, 3, 2, 3, 3, 3, 3],\n",
              "      dtype=int32)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "# Predict the clusters to group the cryptocurrencies using the scaled data\n",
        "kmeans_predictions = model.predict(df_stocks_scaled)\n",
        "\n",
        "# Print the resulting array of cluster values.\n",
        "kmeans_predictions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "afa_cQXqNprA"
      },
      "outputs": [],
      "source": [
        "# Create a copy of the DataFrame\n",
        "k_means_segments=df_stocks_scaled.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "ycs-jXnrNprA",
        "outputId": "a8a78dae-5872-419b-c5d3-9a2ee1ca3992"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           price_change_percentage_24h  price_change_percentage_7d  \\\n",
              "coin_id                                                              \n",
              "dash                         -0.296940                    0.094763   \n",
              "vechain                       0.585089                   -0.994231   \n",
              "chainlink                     0.011397                    2.572251   \n",
              "zcash                        -0.127467                    0.929119   \n",
              "ethereum                      0.185446                    0.934445   \n",
              "\n",
              "           price_change_percentage_14d  price_change_percentage_30d  \\\n",
              "coin_id                                                               \n",
              "dash                          0.040040                    -0.358830   \n",
              "vechain                      -2.217108                    -0.603898   \n",
              "chainlink                     1.101647                    -0.490495   \n",
              "zcash                         0.677532                     0.223834   \n",
              "ethereum                      0.558692                    -0.054341   \n",
              "\n",
              "           price_change_percentage_60d  price_change_percentage_200d  \\\n",
              "coin_id                                                                \n",
              "dash                         -0.558527                     -0.535732   \n",
              "vechain                      -0.930423                      0.077149   \n",
              "chainlink                    -0.931954                      0.387759   \n",
              "zcash                        -0.437068                     -0.265163   \n",
              "ethereum                     -0.273483                     -0.115759   \n",
              "\n",
              "           price_change_percentage_1y  k_mean_segments  \n",
              "coin_id                                                 \n",
              "dash                        -0.284071                3  \n",
              "vechain                     -0.117482                3  \n",
              "chainlink                   -0.018284                0  \n",
              "zcash                       -0.214829                0  \n",
              "ethereum                    -0.199352                0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c6533975-be6a-4d95-be27-3a525a03ea81\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price_change_percentage_24h</th>\n",
              "      <th>price_change_percentage_7d</th>\n",
              "      <th>price_change_percentage_14d</th>\n",
              "      <th>price_change_percentage_30d</th>\n",
              "      <th>price_change_percentage_60d</th>\n",
              "      <th>price_change_percentage_200d</th>\n",
              "      <th>price_change_percentage_1y</th>\n",
              "      <th>k_mean_segments</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>coin_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>dash</th>\n",
              "      <td>-0.296940</td>\n",
              "      <td>0.094763</td>\n",
              "      <td>0.040040</td>\n",
              "      <td>-0.358830</td>\n",
              "      <td>-0.558527</td>\n",
              "      <td>-0.535732</td>\n",
              "      <td>-0.284071</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>vechain</th>\n",
              "      <td>0.585089</td>\n",
              "      <td>-0.994231</td>\n",
              "      <td>-2.217108</td>\n",
              "      <td>-0.603898</td>\n",
              "      <td>-0.930423</td>\n",
              "      <td>0.077149</td>\n",
              "      <td>-0.117482</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>chainlink</th>\n",
              "      <td>0.011397</td>\n",
              "      <td>2.572251</td>\n",
              "      <td>1.101647</td>\n",
              "      <td>-0.490495</td>\n",
              "      <td>-0.931954</td>\n",
              "      <td>0.387759</td>\n",
              "      <td>-0.018284</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>zcash</th>\n",
              "      <td>-0.127467</td>\n",
              "      <td>0.929119</td>\n",
              "      <td>0.677532</td>\n",
              "      <td>0.223834</td>\n",
              "      <td>-0.437068</td>\n",
              "      <td>-0.265163</td>\n",
              "      <td>-0.214829</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ethereum</th>\n",
              "      <td>0.185446</td>\n",
              "      <td>0.934445</td>\n",
              "      <td>0.558692</td>\n",
              "      <td>-0.054341</td>\n",
              "      <td>-0.273483</td>\n",
              "      <td>-0.115759</td>\n",
              "      <td>-0.199352</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6533975-be6a-4d95-be27-3a525a03ea81')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c6533975-be6a-4d95-be27-3a525a03ea81 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c6533975-be6a-4d95-be27-3a525a03ea81');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "# Add a new column to the DataFrame with the predicted clusters\n",
        "k_means_segments['k_mean_segments']=kmeans_predictions\n",
        "\n",
        "# Display sample data\n",
        "k_means_segments.sample(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "zeIfJ5tGNprA",
        "outputId": "fca23d5e-9a20-4f4f-b7e9-4f7851db1b53"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='price_change_percentage_24h', ylabel='price_change_percentage_7d'>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Create a scatter plot using hvPlot by setting\n",
        "# `x=\"price_change_percentage_24h\"` and `y=\"price_change_percentage_7d\"`.\n",
        "# Color the graph points with the labels found using K-Means and\n",
        "# add the crypto name in the `hover_cols` parameter to identify\n",
        "# the cryptocurrency represented by each data point.\n",
        "k_means_segments.plot.scatter(\"price_change_percentage_24h\", \"price_change_percentage_7d\", c='k_mean_segments', cmap='plasma')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "82zPybeDNprA"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bhd5NDIyNprA"
      },
      "source": [
        "### Optimize Clusters with Principal Component Analysis."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "cNEuomu_NprB"
      },
      "outputs": [],
      "source": [
        "# Create a PCA model instance and set `n_components=3`.\n",
        "pca=PCA(n_components=3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b5ePJxtLNprB",
        "outputId": "229434bd-0e43-4d4a-800a-9f2fcc972e6a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.60066733,  0.84276006,  0.46159457],\n",
              "       [-0.45826071,  0.45846566,  0.95287678],\n",
              "       [-0.43306981, -0.16812638, -0.64175193],\n",
              "       [-0.47183495, -0.22266008, -0.47905316],\n",
              "       [-1.15779997,  2.04120919,  1.85971527]])"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "# Use the PCA model with `fit_transform` to reduce to\n",
        "# three principal components.\n",
        "stocks_pca = pca.fit_transform(df_stocks_scaled)\n",
        "# View the first five rows of the DataFrame.\n",
        "stocks_pca[:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xTKqzRITNprB",
        "outputId": "4975508f-d183-4a9c-bc44-9a0159b0fd17"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.3719856 , 0.34700813, 0.17603793])"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "# Retrieve the explained variance to determine how much information\n",
        "# can be attributed to each principal component.\n",
        "pca.explained_variance_ratio_"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Fit the PCA model to your data\n",
        "pca.fit(df_stocks_scaled)\n",
        "\n",
        "# Get the loadings (coefficients) for each feature\n",
        "loadings = pca.components_\n",
        "\n",
        "# Determine the absolute magnitude of the loadings\n",
        "absolute_loadings = np.abs(loadings)\n",
        "\n",
        "# Find the most important feature for each component\n",
        "most_important_features = np.argmax(absolute_loadings, axis=1)\n",
        "\n",
        "# Print the most important features for each component\n",
        "for component, feature_idx in enumerate(most_important_features):\n",
        "    feature_name = df_stocks_scaled.columns[feature_idx]  # Assuming you have column names\n",
        "    print(f\"Component {component+1}: Most important feature is {feature_name}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FrS0ZTb8aVJP",
        "outputId": "13c86c4d-2bec-4bee-9248-ca04e624dadb"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Component 1: Most important feature is price_change_percentage_200d\n",
            "Component 2: Most important feature is price_change_percentage_30d\n",
            "Component 3: Most important feature is price_change_percentage_7d\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S-RlD9KKNprB"
      },
      "source": [
        "#### Answer the following question:\n",
        "\n",
        "**Question:** What is the total explained variance of the three principal components?\n",
        "\n",
        "**Answer:**\n",
        "The summary of variance is 88%. The price_change_percentage_200d provides 37%, price_change_percentage_30d 34% and price_change_percentage_7d 17%."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "GShIDh6HNprB",
        "outputId": "c1e5c154-ae7c-4dc3-d9c0-697a40c59f2c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 PCA1      PCA2      PCA3\n",
              "coin_id                                  \n",
              "nem          0.608974  0.563532 -1.148742\n",
              "eos         -0.693425 -0.473815 -0.527597\n",
              "havven       0.865762 -2.261882  0.275583\n",
              "binancecoin -0.516534  1.388377  0.804071\n",
              "ripple      -0.471835 -0.222660 -0.479053\n",
              "cosmos      -0.306272  0.703415  1.714224\n",
              "maker       -0.389045  0.165041  0.379414\n",
              "binance-usd -0.450211 -0.151019 -0.647401\n",
              "tezos       -0.796176 -0.494409  1.082812\n",
              "stellar     -0.489015 -0.732719 -0.062543"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4bb009de-8f35-4f48-a3ea-47f53cea0c9e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PCA1</th>\n",
              "      <th>PCA2</th>\n",
              "      <th>PCA3</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>coin_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>nem</th>\n",
              "      <td>0.608974</td>\n",
              "      <td>0.563532</td>\n",
              "      <td>-1.148742</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>eos</th>\n",
              "      <td>-0.693425</td>\n",
              "      <td>-0.473815</td>\n",
              "      <td>-0.527597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>havven</th>\n",
              "      <td>0.865762</td>\n",
              "      <td>-2.261882</td>\n",
              "      <td>0.275583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>binancecoin</th>\n",
              "      <td>-0.516534</td>\n",
              "      <td>1.388377</td>\n",
              "      <td>0.804071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ripple</th>\n",
              "      <td>-0.471835</td>\n",
              "      <td>-0.222660</td>\n",
              "      <td>-0.479053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cosmos</th>\n",
              "      <td>-0.306272</td>\n",
              "      <td>0.703415</td>\n",
              "      <td>1.714224</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>maker</th>\n",
              "      <td>-0.389045</td>\n",
              "      <td>0.165041</td>\n",
              "      <td>0.379414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>binance-usd</th>\n",
              "      <td>-0.450211</td>\n",
              "      <td>-0.151019</td>\n",
              "      <td>-0.647401</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tezos</th>\n",
              "      <td>-0.796176</td>\n",
              "      <td>-0.494409</td>\n",
              "      <td>1.082812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>stellar</th>\n",
              "      <td>-0.489015</td>\n",
              "      <td>-0.732719</td>\n",
              "      <td>-0.062543</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4bb009de-8f35-4f48-a3ea-47f53cea0c9e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4bb009de-8f35-4f48-a3ea-47f53cea0c9e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4bb009de-8f35-4f48-a3ea-47f53cea0c9e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ],
      "source": [
        "# Create a new DataFrame with the PCA data.\n",
        "# Creating a DataFrame with the PCA data\n",
        "pca_df= pd.DataFrame(\n",
        "    stocks_pca,\n",
        "    columns=[\"PCA1\", \"PCA2\",\"PCA3\"]\n",
        ")\n",
        "\n",
        "# # Copy the crypto names from the original data\n",
        "pca_df['coin_id']=df_stocks_scaled.index\n",
        "\n",
        "# # Display sample data\n",
        "pca_df = pca_df.set_index(\"coin_id\")\n",
        "# # Set the coinid column as index\n",
        "\n",
        "\n",
        "# # Display sample data\n",
        "pca_df.sample(10)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wXKb2AKONprB"
      },
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "76eZ6gyZNprB"
      },
      "source": [
        "### Find the Best Value for k Using the PCA Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KB-ptBa_NprB"
      },
      "outputs": [],
      "source": [
        "# Create a list with the number of k-values from 1 to 11\n",
        "k = list(range(1, 11))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qSI2IQOwNprB",
        "outputId": "62d92f46-9bc1-42a5-92f9-cf3ced5f9993"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "# Create an empty list to store the inertia values\n",
        "inertia = []\n",
        "\n",
        "# Create a for loop to compute the inertia with each possible value of k\n",
        "# Inside the loop:\n",
        "# 1. Create a KMeans model using the loop counter for the n_clusters\n",
        "# 2. Fit the model to the data using `df_market_data_pca`\n",
        "# 3. Append the model.inertia_ to the inertia list\n",
        "for i in k:\n",
        "    k_model = KMeans(n_clusters=i, random_state=0)\n",
        "    k_model.fit(pca_df)\n",
        "    inertia.append(k_model.inertia_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "E2jNyC13NprB",
        "outputId": "34aab1f1-92e8-4f75-c3f6-b37d8a5c812f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   k     inertia\n",
              "0  1  287.000000\n",
              "1  2  195.820218\n",
              "2  3  123.190482\n",
              "3  4   79.022435\n",
              "4  5   65.302379"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-97b73b62-a2f6-426d-9144-11ebec13a284\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>k</th>\n",
              "      <th>inertia</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>287.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>195.820218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>123.190482</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>79.022435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>65.302379</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-97b73b62-a2f6-426d-9144-11ebec13a284')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-97b73b62-a2f6-426d-9144-11ebec13a284 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-97b73b62-a2f6-426d-9144-11ebec13a284');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ],
      "source": [
        "# Create a dictionary with the data to plot the Elbow curve\n",
        "elbow_data_pca = {\"k\": k, \"inertia\": inertia}\n",
        "# Create a DataFrame with the data to plot the Elbow curve\n",
        "df_elbow_pca = pd.DataFrame(elbow_data)\n",
        "df_elbow_pca.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "5cLGowYNNprB",
        "outputId": "abb7d686-b1d7-4ef0-8f45-4bdbdd5b9668"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Elbow Curve'}, xlabel='k'>"
            ]
          },
          "metadata": {},
          "execution_count": 87
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plot a line chart with all the inertia values computed with\n",
        "# the different values of k to visually identify the optimal value for k.\n",
        "df_elbow_pca.plot.line(\n",
        "    x=\"k\",\n",
        "    y=\"inertia\",\n",
        "    title=\"Elbow Curve\",\n",
        "    xticks=k\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7xMasftZNprB"
      },
      "source": [
        "#### Answer the following questions:\n",
        "\n",
        "* **Question:** What is the best value for `k` when using the PCA data?\n",
        "\n",
        "  * **Answer:**\n",
        "The best value is four.\n",
        "\n",
        "* **Question:** Does it differ from the best k value found using the original data?\n",
        "\n",
        "  * **Answer:** No, its the same."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ziZtId4ONprB"
      },
      "source": [
        "### Cluster Cryptocurrencies with K-means Using the PCA Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "thZuetd3NprB"
      },
      "outputs": [],
      "source": [
        "# Initialize the K-Means model using the best value for k\n",
        "model_pca = KMeans(n_clusters=4, random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "id": "HwSMApjxNprP",
        "outputId": "1a6e8d8e-d46c-4d26-f946-3331a5a86901"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KMeans(n_clusters=4, random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=4, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=4, random_state=0)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ],
      "source": [
        "# Fit the K-Means model using the PCA data\n",
        "model_pca.fit(pca_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wztVCg8yNprP"
      },
      "outputs": [],
      "source": [
        "# Predict the clusters to group the cryptocurrencies using the PCA data\n",
        "k_4 = model_pca.predict(pca_df)\n",
        "# Print the resulting array of cluster values.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "6YRDJBR9NprP",
        "outputId": "87efb51d-e7b1-44d9-cd50-467ac9c97ec1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               PCA1      PCA2      PCA3  stock_segments\n",
              "coin_id                                                \n",
              "chainlink -0.450711  0.517699  2.846143               0\n",
              "nem        0.608974  0.563532 -1.148742               3\n",
              "dash      -0.613923 -0.479337  0.339565               3\n",
              "maker     -0.389045  0.165041  0.379414               0\n",
              "true-usd  -0.458131 -0.135734 -0.635284               3\n",
              "omisego    0.111675  0.428316 -1.205398               3\n",
              "ethlend    8.089018 -3.896891  2.301382               1\n",
              "tezos     -0.796176 -0.494409  1.082812               0\n",
              "cosmos    -0.306272  0.703415  1.714224               0\n",
              "cardano   -0.345600  0.729439  1.478013               0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d95eeb01-3504-47f2-b1d0-1a7dad4b4004\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PCA1</th>\n",
              "      <th>PCA2</th>\n",
              "      <th>PCA3</th>\n",
              "      <th>stock_segments</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>coin_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>chainlink</th>\n",
              "      <td>-0.450711</td>\n",
              "      <td>0.517699</td>\n",
              "      <td>2.846143</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>nem</th>\n",
              "      <td>0.608974</td>\n",
              "      <td>0.563532</td>\n",
              "      <td>-1.148742</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dash</th>\n",
              "      <td>-0.613923</td>\n",
              "      <td>-0.479337</td>\n",
              "      <td>0.339565</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>maker</th>\n",
              "      <td>-0.389045</td>\n",
              "      <td>0.165041</td>\n",
              "      <td>0.379414</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>true-usd</th>\n",
              "      <td>-0.458131</td>\n",
              "      <td>-0.135734</td>\n",
              "      <td>-0.635284</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>omisego</th>\n",
              "      <td>0.111675</td>\n",
              "      <td>0.428316</td>\n",
              "      <td>-1.205398</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ethlend</th>\n",
              "      <td>8.089018</td>\n",
              "      <td>-3.896891</td>\n",
              "      <td>2.301382</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tezos</th>\n",
              "      <td>-0.796176</td>\n",
              "      <td>-0.494409</td>\n",
              "      <td>1.082812</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cosmos</th>\n",
              "      <td>-0.306272</td>\n",
              "      <td>0.703415</td>\n",
              "      <td>1.714224</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cardano</th>\n",
              "      <td>-0.345600</td>\n",
              "      <td>0.729439</td>\n",
              "      <td>1.478013</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d95eeb01-3504-47f2-b1d0-1a7dad4b4004')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d95eeb01-3504-47f2-b1d0-1a7dad4b4004 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d95eeb01-3504-47f2-b1d0-1a7dad4b4004');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ],
      "source": [
        "# Create a copy of the DataFrame with the PCA data\n",
        "pca_predictions_df = pca_df.copy()\n",
        "# Add a new column to the DataFrame with the predicted clusters\n",
        "pca_predictions_df[\"stock_segments\"] = k_4\n",
        "# Display sample data\n",
        "pca_predictions_df.sample(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 473
        },
        "id": "pONYOeTQNprP",
        "outputId": "71debe15-96d0-45a2-b9f4-d95062513534"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='PCA1', ylabel='PCA2'>"
            ]
          },
          "metadata": {},
          "execution_count": 103
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Create a scatter plot using hvPlot by setting\n",
        "# `x=\"PC1\"` and `y=\"PC2\"`.\n",
        "# Color the graph points with the labels found using K-Means and\n",
        "# add the crypto name in the `hover_cols` parameter to identify\n",
        "# the cryptocurrency represented by each data point.\n",
        "pca_predictions_df.plot.scatter(\"PCA1\", \"PCA2\", c='stock_segments', cmap='cividis')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2jFHPFvJNprP"
      },
      "source": [
        "### Visualize and Compare the Results\n",
        "\n",
        "In this section, you will visually analyze the cluster analysis results by contrasting the outcome with and without using the optimization techniques."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "m4WXHLVrNprP",
        "outputId": "688ef850-453a-4b92-a181-c8e125f9a55a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Assuming you have two DataFrames: df_elbow and df_elbow_pca\n",
        "\n",
        "# Create a new figure\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "\n",
        "# Plot the elbow curve for the original data\n",
        "ax.plot(df_elbow[\"k\"], df_elbow[\"inertia\"], label=\"K-means Data\")\n",
        "\n",
        "# Plot the elbow curve for the PCA data\n",
        "ax.plot(df_elbow_pca[\"k\"], df_elbow_pca[\"inertia\"], label=\"PCA Data\")\n",
        "\n",
        "# Set the x-axis label, y-axis label, and title\n",
        "ax.set_xlabel(\"Number of Clusters (k)\")\n",
        "ax.set_ylabel(\"Inertia\")\n",
        "ax.set_title(\"Elbow Curves\")\n",
        "\n",
        "# Add a legend\n",
        "ax.legend()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "pU9eYH1HNprP",
        "outputId": "578a7eba-bdd5-4e73-cdb7-1e2f2dfd37bc"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Composite plot to contrast the clusters\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create a new figure\n",
        "fig, axs = plt.subplots(1, 2, figsize=(12, 6))\n",
        "\n",
        "# Plot the scatter plot for k_means_segments on the first subplot\n",
        "scatter1 = axs[0].scatter(k_means_segments[\"price_change_percentage_24h\"], k_means_segments[\"price_change_percentage_7d\"], c=k_means_segments[\"k_mean_segments\"], cmap='plasma')\n",
        "axs[0].set_xlabel(\"Price Change Percentage (24h)\")\n",
        "axs[0].set_ylabel(\"Price Change Percentage (7d)\")\n",
        "axs[0].set_title(\"k_means_segments Scatter Plot\")\n",
        "colorbar1 = plt.colorbar(scatter1, ax=axs[0])\n",
        "colorbar1.set_label('k_mean_segments')\n",
        "\n",
        "# Plot the scatter plot for pca_predictions_df on the second subplot\n",
        "scatter2 = axs[1].scatter(pca_predictions_df[\"PCA1\"], pca_predictions_df[\"PCA2\"], c=pca_predictions_df[\"stock_segments\"], cmap='cividis')\n",
        "axs[1].set_xlabel(\"PCA1\")\n",
        "axs[1].set_ylabel(\"PCA2\")\n",
        "axs[1].set_title(\"pca_predictions_df Scatter Plot\")\n",
        "colorbar2 = plt.colorbar(scatter2, ax=axs[1])\n",
        "colorbar2.set_label('stock_segments')\n",
        "\n",
        "# Adjust spacing between subplots\n",
        "plt.tight_layout()\n",
        "\n",
        "# Show the composite plot\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WO3AlmvCNprP"
      },
      "source": [
        "#### Answer the following question:\n",
        "\n",
        "  * **Question:** After visually analyzing the cluster analysis results, what is the impact of using fewer features to cluster the data using K-Means?\n",
        "\n",
        "  * **Answer:**"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.4"
    },
    "nteract": {
      "version": "0.28.0"
    },
    "vscode": {
      "interpreter": {
        "hash": "40d3a090f54c6569ab1632332b64b2c03c39dcf918b08424e98f38b5ae0af88f"
      }
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}